{"version":3,"sources":["media/deck.png","components/Timer.js","constants/index.js","containers/TimerContainer.js","actions/index.js","components/Card.js","components/Cards.js","containers/CardsContainer.js","components/Modal.js","components/Result.js","components/Header.js","containers/Game.js","reducers/timer.js","reducers/cards.js","reducers/index.js","data/playing-cards.js","containers/App.js","index.js"],"names":["module","exports","addZero","num","isFinishing","remainingTime","Timer","isFinish","timerValue","min","Math","trunc","sec","getTimerValue","className","classNames","defaultProps","ActionTypes","COUNT_CARDS_IN_PAIR","GameOptions","countPair","totalCountCards","delayClosingPair","delayClosingCard","InitialState","timer","cards","visibleCounts","total","isOpened","TimerContainer","props","interval","this","start","stop","clearInterval","tick","setInterval","React","Component","connect","state","dispatch","type","Card","onClick","isClosed","isHided","imgSrc","bgImgSrc","ImgDeck","process","style","backgroundImage","Cards","map","card","key","id","name","CardsContainer","handleClick","open","length","prevProps","hide","stopTimout","isOpenPair","delayClosing","closeCards","isMatchingCards","clearTimeout","delay","close","setTimeout","first","second","number","suit","openCard","Modal","children","title","modal","Result","isOpen","isWin","Header","action","filter","combineReducers","numbers","suits","getRandomCards","forEach","push","getPlayingCards","newCards","randomCard","floor","random","includes","getNewCards","sort","getShuffleCards","index","store","createStore","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45b4d5a3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/deck.6c1cbf76.png\";","import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './Timer.scss';\n\nconst addZero = (num) => ((num < 10) ? `0${num}` : num);\n\nconst getTimerValue = (remainingTime) => {\n  const SECS_IN_ONE_MIN = 60;\n  return {\n    min: addZero(Math.trunc(remainingTime / SECS_IN_ONE_MIN)),\n    sec: addZero(remainingTime % SECS_IN_ONE_MIN),\n  };\n};\n\nconst isFinishing = (remainingTime) => remainingTime && remainingTime < 30;\n\nconst Timer = ({ remainingTime, isFinish }) => {\n  const timerValue = getTimerValue(remainingTime);\n  return (\n    <div className={classNames('timer', {\n      'timer--is-finishing': isFinishing(remainingTime),\n      'timer--is-finished': isFinish,\n    })}\n    >\n      <span className=\"timer__value\">\n        {timerValue.min}\n      </span>\n      <span className=\"timer__dots\">:</span>\n      <span className=\"timer__value\">{timerValue.sec}</span>\n    </div>\n  );\n};\n\nTimer.defaultProps = {\n  remainingTime: 0,\n};\n\n\nTimer.propTypes = {\n  remainingTime: PropTypes.number,\n  isFinish: PropTypes.bool.isRequired,\n};\n\nexport default Timer;\n","export const ActionTypes = {\n  START_TIMER: 'START_TIMER',\n  STOP_TIMER: 'STOP_TIMER',\n  OPEN_CARD: 'OPEN_CARD',\n  CLOSE_CARD: 'CLOSE_CARD',\n  HIDE_CARD: 'HIDE_CARD',\n  RECEIVE_CARDS: 'RECEIVE_CARDS',\n};\n\nconst COUNT_PAIR = 18;\nexport const COUNT_CARDS_IN_PAIR = 2;\n\nexport const GameOptions = {\n  countPair: COUNT_PAIR,\n  totalCountCards: COUNT_PAIR * COUNT_CARDS_IN_PAIR,\n  delayClosingPair: 1500,\n  delayClosingCard: 5000,\n};\n\nexport const InitialState = {\n  timer: 300,\n  cards: {\n    visibleCounts: GameOptions.totalCountCards,\n    total: [],\n    isOpened: [],\n  },\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Timer from '../components/Timer';\nimport { startTimer } from '../actions';\n\nconst intervalLength = 1000;\n\nclass TimerContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.interval = null;\n  }\n\n  componentDidMount() {\n    this.start();\n  }\n\n  componentWillUnmount() {\n    this.stop();\n  }\n\n  stop() {\n    if (this.interval) clearInterval(this.interval);\n  }\n\n  start() {\n    const { tick } = this.props;\n    this.interval = setInterval(tick, intervalLength);\n  }\n\n  render() {\n    const { remainingTime, isFinish } = this.props;\n    if (isFinish) this.stop();\n    return (\n      <Timer remainingTime={remainingTime} isFinish={isFinish} />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  remainingTime: state.timer,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  tick: () => {\n    dispatch(startTimer());\n  },\n});\n\nTimerContainer.propTypes = {\n  remainingTime: PropTypes.number.isRequired,\n  tick: PropTypes.func.isRequired,\n  isFinish: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TimerContainer);\n","import { ActionTypes } from '../constants';\n\nexport const startTimer = () => ({\n  type: ActionTypes.START_TIMER,\n});\n\nexport const openCard = (id, name) => ({\n  type: ActionTypes.OPEN_CARD,\n  id,\n  name,\n});\n\nexport const closeCard = () => ({\n  type: ActionTypes.CLOSE_CARD,\n});\n\nexport const hideCard = () => ({\n  type: ActionTypes.HIDE_CARD,\n});\n\nexport const receiveCards = (cards) => ({\n  type: ActionTypes.RECEIVE_CARDS,\n  cards,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './Card.scss';\nimport ImgDeck from '../media/deck.png';\n\nconst Card = ({\n  onClick, isClosed, isHided, imgSrc,\n}) => {\n  const bgImgSrc = isClosed ? ImgDeck : `${process.env.PUBLIC_URL}/${imgSrc}`;\n  return (\n  <li className=\"card\">\n    <button\n      type=\"button\"\n      onClick={onClick}\n      className={classNames('card__item', {\n        'card__item--is-hided': isHided,\n      })}\n      style={{ backgroundImage: `url(${bgImgSrc})` }}\n    />\n  </li>\n);}\n\nCard.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  isClosed: PropTypes.bool.isRequired,\n  isHided: PropTypes.bool.isRequired,\n  imgSrc: PropTypes.string.isRequired,\n};\n\nexport default Card;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from './Card';\nimport './Cards.scss';\n\nconst Cards = ({ cards, onClick }) => (\n  <ul className=\"cards\">\n    {cards.map((card) => (\n      <Card\n        key={card.id}\n        name={card.name}\n        imgSrc={card.imgSrc}\n        isClosed={card.isClosed}\n        isHided={card.isHided}\n        onClick={() => onClick(card)}\n      />\n    ))}\n  </ul>\n);\n\nCards.propTypes = {\n  cards: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    isClosed: PropTypes.bool.isRequired,\n    isHided: PropTypes.bool.isRequired,\n    name: PropTypes.objectOf(PropTypes.string).isRequired,\n    imgSrc: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Cards;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { openCard, closeCard, hideCard } from '../actions';\nimport Cards from '../components/Cards';\nimport { GameOptions, COUNT_CARDS_IN_PAIR } from '../constants';\n\nclass CardsContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.timer = null;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { isOpened, hide } = this.props;\n    this.stopTimout();\n    if (prevProps.isOpened.length !== isOpened.length) {\n      const isOpenPair = isOpened.length === COUNT_CARDS_IN_PAIR;\n      const delayClosing = isOpenPair\n        ? GameOptions.delayClosingPair : GameOptions.delayClosingCard;\n      this.closeCards(delayClosing);\n      if (isOpenPair && this.isMatchingCards()) hide();\n    }\n  }\n\n  componentWillUnmount() {\n    this.stopTimout();\n  }\n\n  handleClick = (card) => {\n    const { open, isOpened } = this.props;\n    if (isOpened.length === COUNT_CARDS_IN_PAIR || !card.isClosed) return;\n    open(card.id, card.name);\n  };\n\n  stopTimout() {\n    if (this.timer) clearTimeout(this.timer);\n  }\n\n  closeCards(delay) {\n    const { close } = this.props;\n    this.timer = setTimeout(close, delay);\n  }\n\n  isMatchingCards() {\n    const { isOpened } = this.props;\n    const [first, second] = [isOpened[0], isOpened[1]];\n    return first.name.number === second.name.number && first.name.suit === second.name.suit;\n  }\n\n  render() {\n    const { cards } = this.props;\n    return (\n      <Cards cards={cards} onClick={this.handleClick} />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  cards: state.cards.total,\n  isOpened: state.cards.isOpened,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  open: (id, name) => dispatch(openCard(id, name)),\n  close: () => dispatch(closeCard()),\n  hide: () => dispatch(hideCard()),\n});\n\nCardsContainer.propTypes = {\n  cards: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    isClosed: PropTypes.bool.isRequired,\n    isHided: PropTypes.bool.isRequired,\n    name: PropTypes.objectOf(PropTypes.string).isRequired,\n    imgSrc: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n  isOpened: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.objectOf(PropTypes.string).isRequired,\n  }).isRequired).isRequired,\n  open: PropTypes.func.isRequired,\n  close: PropTypes.func.isRequired,\n  hide: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CardsContainer);\n","import React from 'react';\nimport Popup from 'reactjs-popup';\nimport PropTypes from 'prop-types';\nimport './Modal.scss';\n\nconst Modal = ({ children, title, open = false }) => {\n  return (\n  <Popup open={open} modal>\n    {(close) => (\n      <div className=\"modal\">\n        <button type=\"button\" className=\"modal__close\" onClick={close}>\n          &times;\n        </button>\n        <div className=\"modal__header\">\n          {title}\n        </div>\n        <div className=\"modal__content\">\n          {children}\n        </div>\n      </div>\n    )}\n  </Popup>\n);}\n\nModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  open: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n};\n\nexport default Modal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Modal from './Modal';\nimport './Result.scss';\n\nconst Result = ({\n  remainingTime, visibleCounts, isOpen,\n}) => {\n  const isWin = remainingTime && !visibleCounts;\n  return (\n    <Modal open={isOpen} title=\"Результаты игры:\">\n      <p className={classNames('result', {\n        'result--is-loser': !isWin,\n      })}\n      >\n        {isWin ? 'Ура! Вы выиграли! 🎉' : 'К сожалению вы проиграли, Вам не хватило время 😟 Попробуйте еще раз!'}\n      </p>\n    </Modal>\n  );\n};\n\nResult.propTypes = {\n  remainingTime: PropTypes.number.isRequired,\n  visibleCounts: PropTypes.number.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n};\n\nexport default Result;\n","import React from 'react';\n\nconst Header = () => (\n  <header>\n    <h1>Найди пару</h1>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport PropTypes from 'prop-types';\nimport TimerContainer from './TimerContainer';\nimport CardsContainer from './CardsContainer';\nimport Result from '../components/Result';\nimport Header from '../components/Header';\n\nconst Game = ({ remainingTime, visibleCounts, isFinish }) => {\n  return (\n    <>\n      <Header />\n      <TimerContainer isFinish={isFinish} />\n      {isFinish\n        ? <Result remainingTime={remainingTime} visibleCounts={visibleCounts} isOpen />\n        : <CardsContainer />}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  remainingTime: state.timer,\n  visibleCounts: state.cards.visibleCounts,\n  isFinish: !state.timer || !state.cards.visibleCounts,\n});\n\nGame.propTypes = {\n  remainingTime: PropTypes.number.isRequired,\n  visibleCounts: PropTypes.number.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  null,\n)(Game);\n","import { InitialState, ActionTypes } from '../constants';\n\nconst timer = (state = InitialState.timer, action) => {\n  if (action.type === ActionTypes.START_TIMER) {\n    return state - 1;\n  }\n  return state;\n};\n\nexport default timer;\n","import { InitialState, ActionTypes, COUNT_CARDS_IN_PAIR } from '../constants';\n\nconst cards = (state = InitialState.cards, action) => {\n  switch (action.type) {\n    case ActionTypes.OPEN_CARD:\n      return {\n        ...state,\n        isOpened: [...state.isOpened, ...state.total\n          .filter((card) => (card.id === action.id))\n          .map((card) => ({ id: card.id, name: card.name }))],\n        total: state.total.map((card) => ((card.id === action.id)\n          ? { ...card, isClosed: false } : card)),\n      };\n    case ActionTypes.CLOSE_CARD:\n      return {\n        ...state,\n        isOpened: [],\n        total: state.total.map((card) => ((!card.isClosed)\n          ? { ...card, isClosed: true } : card)),\n      };\n    case ActionTypes.HIDE_CARD:\n      return {\n        ...state,\n        isOpened: [],\n        visibleCounts: state.visibleCounts - COUNT_CARDS_IN_PAIR,\n        total: state.total.map((card) => ((!card.isHided && !card.isClosed)\n          ? { ...card, isHided: true } : card)),\n      };\n    case ActionTypes.RECEIVE_CARDS:\n      return {\n        ...state,\n        total: action.cards.map((card) => ({ ...card, isClosed: true, isHided: false })),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default cards;\n","import { combineReducers } from 'redux';\nimport timer from './timer';\nimport cards from './cards';\n\nexport default combineReducers({\n  timer,\n  cards,\n});\n","import { GameOptions } from '../constants';\n\nconst numbers = ['ace', 'king', 'queen', 'jack', 'ten', 'nine', 'eight', 'seven', 'six'];\nconst suits = ['heart', 'diamond', 'spades', 'club'];\n\nconst getPlayingCards = () => {\n  const cards = [];\n  suits.forEach((suit) => {\n    numbers.forEach((number) => cards.push({\n      imgSrc: `media/cards/${number}_${suit}.png`,\n      name: {\n        number,\n        suit,\n      },\n    }));\n    return cards;\n  });\n  return cards;\n};\n\nconst getShuffleCards = (cards) => cards.sort(() => Math.random() - 0.5);\n\nconst getNewCards = (cards) => {\n  const newCards = [];\n  while (newCards.length < GameOptions.countPair) {\n    const randomCard = cards[Math.floor(Math.random() * cards.length)];\n    if (!newCards.includes(randomCard)) newCards.push(randomCard);\n  }\n  return newCards;\n};\n\nconst getRandomCards = () => {\n  const cards = getPlayingCards();\n  if (cards.length < GameOptions.countPair) return [];\n  const newCards = getNewCards(cards);\n  const shuffledCards = getShuffleCards([...newCards, ...newCards]);\n  return shuffledCards.map((card, index) => ({ ...card, id: index }));\n};\n\nexport default getRandomCards;\n","import React from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport Game from './Game';\nimport combineReducers from '../reducers';\nimport { receiveCards } from '../actions';\nimport getRandomCards from '../data/playing-cards';\n\nconst store = createStore(combineReducers);\n\nconst cards = getRandomCards();\nstore.dispatch(receiveCards(cards));\n\nconst App = () => (\n  <main>\n    <Provider store={store}>\n      <Game />\n    </Provider>\n  </main>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './containers/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}