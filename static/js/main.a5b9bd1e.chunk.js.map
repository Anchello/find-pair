{"version":3,"sources":["components/Timer.js","constants/index.js","containers/TimerContainer.js","actions/index.js","components/Card.js","components/Cards.js","containers/CardsContainer.js","components/Modal.js","components/Result.js","containers/Game.js","reducers/timer.js","reducers/cards.js","reducers/index.js","data/playing-cards.js","components/Header.js","containers/App.js","index.js"],"names":["addZero","num","isFinishing","remainingTime","Timer","isFinish","timerValue","min","Math","trunc","sec","getTimerValue","className","classNames","defaultProps","ActionTypes","GameOptions","countPair","totalCountCards","COUNT_PAIR","delayClosingPair","delayClosingCard","InitialState","timer","cards","visibleCounts","total","isOpened","connect","state","dispatch","tick","type","intervalRef","useRef","useEffect","current","setInterval","clearInterval","Card","onClick","isClosed","isHidden","imgSrc","style","backgroundImage","process","Cards","map","card","key","id","name","countIsOpened","length","open","openCard","close","hide","timerRef","handleClick","useCallback","isMatchingCards","first","second","number","suit","delayClosing","getDelayClosingCard","setTimeout","clearTimeout","Modal","children","title","useState","isOpen","setIsOpen","handleClose","Result","isWin","action","filter","combineReducers","numbers","suits","getRandomCards","forEach","push","getPlayingCards","newCards","randomCard","floor","random","includes","getNewCards","sort","getShuffleCards","index","Header","store","createStore","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a5b9bd1e.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport './Timer.scss';\n\nconst addZero = (num) => ((num < 10) ? `0${num}` : num);\n\nconst getTimerValue = (remainingTime) => {\n  const SECS_IN_ONE_MIN = 60;\n  return {\n    min: addZero(Math.trunc(remainingTime / SECS_IN_ONE_MIN)),\n    sec: addZero(remainingTime % SECS_IN_ONE_MIN),\n  };\n};\n\nconst isFinishing = (remainingTime) => remainingTime && remainingTime < 30;\n\nconst Timer = ({ remainingTime, isFinish }) => {\n  const timerValue = getTimerValue(remainingTime);\n  return (\n    <div className={classNames('timer', {\n      'timer--is-finishing': isFinishing(remainingTime),\n      'timer--is-finished': isFinish,\n    })}\n    >\n      <span className=\"timer__value\">\n        {timerValue.min}\n      </span>\n      <span className=\"timer__dots\">:</span>\n      <span className=\"timer__value\">{timerValue.sec}</span>\n    </div>\n  );\n};\n\nTimer.defaultProps = {\n  remainingTime: 0,\n};\n\n\nTimer.propTypes = {\n  remainingTime: PropTypes.number,\n  isFinish: PropTypes.bool.isRequired,\n};\n\nexport default Timer;\n","export const ActionTypes = {\n  START_TIMER: 'START_TIMER',\n  STOP_TIMER: 'STOP_TIMER',\n  OPEN_CARD: 'OPEN_CARD',\n  CLOSE_CARD: 'CLOSE_CARD',\n  HIDE_CARD: 'HIDE_CARD',\n  RECEIVE_CARDS: 'RECEIVE_CARDS',\n};\n\nconst COUNT_PAIR = 18;\nexport const COUNT_CARDS_IN_PAIR = 2;\nexport const COUNT_ONE_CARD = 1;\nexport const MS_IN_ONE_MIN = 1000;\n\nexport const GameOptions = {\n  countPair: COUNT_PAIR,\n  totalCountCards: COUNT_PAIR * COUNT_CARDS_IN_PAIR,\n  delayClosingPair: 1500,\n  delayClosingCard: 5000,\n};\n\nexport const InitialState = {\n  timer: 300,\n  cards: {\n    visibleCounts: GameOptions.totalCountCards,\n    total: [],\n    isOpened: [],\n  },\n};\n","import React, { useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Timer from '../components/Timer';\nimport { startTimer } from '../actions';\nimport { MS_IN_ONE_MIN } from '../constants';\n\nconst TimerContainer = ({\n  remainingTime, tick, isFinish,\n}) => {\n  const intervalRef = useRef(0);\n  useEffect(() => {\n    if (!isFinish) {\n      intervalRef.current = setInterval(tick, MS_IN_ONE_MIN);\n    }\n    return () => {\n      clearInterval(intervalRef.current);\n    };\n  }, [tick, isFinish]);\n  return (\n    <Timer remainingTime={remainingTime} isFinish={isFinish} />\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  remainingTime: state.timer,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  tick: () => {\n    dispatch(startTimer());\n  },\n});\n\nTimerContainer.propTypes = {\n  remainingTime: PropTypes.number.isRequired,\n  tick: PropTypes.func.isRequired,\n  isFinish: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(TimerContainer);\n","import { ActionTypes } from '../constants';\n\nexport const startTimer = () => ({\n  type: ActionTypes.START_TIMER,\n});\n\nexport const openCard = (id, name) => ({\n  type: ActionTypes.OPEN_CARD,\n  id,\n  name,\n});\n\nexport const closeCard = () => ({\n  type: ActionTypes.CLOSE_CARD,\n});\n\nexport const hideCard = () => ({\n  type: ActionTypes.HIDE_CARD,\n});\n\nexport const receiveCards = (cards) => ({\n  type: ActionTypes.RECEIVE_CARDS,\n  cards,\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './Card.scss';\n\nconst Card = ({\n  onClick, isClosed, isHidden, imgSrc,\n}) => (\n  <li className={classNames('card', {\n    'card--is-hidden': isHidden,\n    'card--is-opened': !isClosed,\n  })}\n  >\n    <button\n      type=\"button\"\n      onClick={onClick}\n      className=\"card__item card__item--back\"\n    />\n    <button\n      type=\"button\"\n      onClick={onClick}\n      className=\"card__item card__item--front\"\n      style={{ backgroundImage: `url(${process.env.PUBLIC_URL}/${imgSrc})` }}\n    />\n  </li>\n);\n\nCard.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  isClosed: PropTypes.bool.isRequired,\n  isHidden: PropTypes.bool.isRequired,\n  imgSrc: PropTypes.string.isRequired,\n};\n\nexport default Card;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from './Card';\nimport './Cards.scss';\n\nconst Cards = ({ cards, onClick }) => (\n  <ul className=\"cards\">\n    {cards.map((card) => (\n      <Card\n        key={card.id}\n        name={card.name}\n        imgSrc={card.imgSrc}\n        isClosed={card.isClosed}\n        isHidden={card.isHidden}\n        onClick={() => onClick(card)}\n      />\n    ))}\n  </ul>\n);\n\nCards.propTypes = {\n  cards: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    isClosed: PropTypes.bool.isRequired,\n    isHidden: PropTypes.bool.isRequired,\n    name: PropTypes.objectOf(PropTypes.string).isRequired,\n    imgSrc: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Cards;\n","import React, { useEffect, useCallback, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { openCard, closeCard, hideCard } from '../actions';\nimport Cards from '../components/Cards';\nimport { GameOptions, COUNT_CARDS_IN_PAIR, COUNT_ONE_CARD } from '../constants';\n\nconst getDelayClosingCard = (countIsOpened) => {\n  switch (countIsOpened) {\n    case COUNT_CARDS_IN_PAIR:\n      return GameOptions.delayClosingPair;\n    case COUNT_ONE_CARD:\n      return GameOptions.delayClosingCard;\n    default:\n      return null;\n  }\n};\n\nconst CardsContainer = ({\n  cards, isOpened, countIsOpened, open, close, hide,\n}) => {\n  const timerRef = useRef(0);\n  const handleClick = useCallback((card) => {\n    if (countIsOpened === COUNT_CARDS_IN_PAIR || !card.isClosed) return;\n    open(card.id, card.name);\n  }, [countIsOpened, open]);\n\n  const isMatchingCards = useCallback(() => {\n    const [first, second] = [isOpened[0], isOpened[1]];\n    return first.name.number === second.name.number && first.name.suit === second.name.suit;\n  }, [isOpened]);\n\n  useEffect(() => {\n    const delayClosing = getDelayClosingCard(countIsOpened);\n    if (delayClosing) {\n      timerRef.current = setTimeout(close, delayClosing);\n    }\n    return () => {\n      clearTimeout(timerRef.current);\n    };\n  }, [countIsOpened, close]);\n\n  useEffect(() => {\n    const isOpenPair = countIsOpened === COUNT_CARDS_IN_PAIR;\n    if (isOpenPair && isMatchingCards()) hide();\n  }, [countIsOpened, hide, isMatchingCards]);\n\n  return (\n    <Cards cards={cards} onClick={handleClick} />\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  cards: state.cards.total,\n  isOpened: state.cards.isOpened,\n  countIsOpened: state.cards.isOpened.length,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  open: (id, name) => dispatch(openCard(id, name)),\n  close: () => dispatch(closeCard()),\n  hide: () => dispatch(hideCard()),\n});\n\nCardsContainer.propTypes = {\n  cards: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    isClosed: PropTypes.bool.isRequired,\n    isHidden: PropTypes.bool.isRequired,\n    name: PropTypes.objectOf(PropTypes.string).isRequired,\n    imgSrc: PropTypes.string.isRequired,\n  }).isRequired).isRequired,\n  isOpened: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    name: PropTypes.objectOf(PropTypes.string).isRequired,\n  }).isRequired).isRequired,\n  countIsOpened: PropTypes.number.isRequired,\n  open: PropTypes.func.isRequired,\n  close: PropTypes.func.isRequired,\n  hide: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CardsContainer);\n","import React, { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './Modal.scss';\n\n\nconst Modal = ({ children, title, open }) => {\n  const [isOpen, setIsOpen] = useState(open);\n  const handleClose = useCallback(() => {\n    setIsOpen(!isOpen);\n  }, [isOpen]);\n  if (!isOpen) return null;\n  return (\n    <div className=\"modal-wrapper\">\n      <div className=\"modal\">\n        <button type=\"button\" className=\"modal__close\" onClick={handleClose}>\n          <span className=\"modal__close-line\" />\n          <span className=\"modal__close-line\" />\n        </button>\n        {title && (\n        <div className=\"modal__header\">\n          {title}\n        </div>\n        )}\n        <div className=\"modal__content\">\n          {children}\n        </div>\n      </div>\n\n    </div>\n  );\n};\n\nModal.defaultProps = {\n\ttitle: '',\n};\n\nModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  open: PropTypes.bool.isRequired,\n  title: PropTypes.string,\n};\n\nexport default Modal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport Modal from './Modal';\nimport './Result.scss';\n\nconst Result = ({\n  remainingTime, visibleCounts, isOpen,\n}) => {\n  const isWin = remainingTime && !visibleCounts;\n  return (\n    <Modal open={isOpen}>\n      <p className={classNames('result', {\n        'result--is-loser': !isWin,\n      })}\n      >\n        {isWin ? 'Yeah! You won! 🎉' : `Unfortunately you lost, you didn't have enough time 😟 Try again!`}\n      </p>\n    </Modal>\n  );\n};\n\nResult.propTypes = {\n  remainingTime: PropTypes.number.isRequired,\n  visibleCounts: PropTypes.number.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n};\n\nexport default Result;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport PropTypes from 'prop-types';\nimport TimerContainer from './TimerContainer';\nimport CardsContainer from './CardsContainer';\nimport Result from '../components/Result';\n\nconst Game = ({ remainingTime, visibleCounts, isFinish }) => {\n  return (\n    <>\n      <TimerContainer isFinish={isFinish} />\n      {isFinish\n        ? <Result remainingTime={remainingTime} visibleCounts={visibleCounts} isOpen />\n        : <CardsContainer />}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  remainingTime: state.timer,\n  visibleCounts: state.cards.visibleCounts,\n  isFinish: !state.timer || !state.cards.visibleCounts,\n});\n\nGame.propTypes = {\n  remainingTime: PropTypes.number.isRequired,\n  visibleCounts: PropTypes.number.isRequired,\n  isFinish: PropTypes.bool.isRequired,\n};\n\nexport default connect(\n  mapStateToProps,\n  null,\n)(Game);\n","import { InitialState, ActionTypes } from '../constants';\n\nconst timer = (state = InitialState.timer, action) => {\n  if (action.type === ActionTypes.START_TIMER) {\n    return state - 1;\n  }\n  return state;\n};\n\nexport default timer;\n","import { InitialState, ActionTypes, COUNT_CARDS_IN_PAIR } from '../constants';\n\nconst cards = (state = InitialState.cards, action) => {\n  switch (action.type) {\n    case ActionTypes.OPEN_CARD:\n      return {\n        ...state,\n        isOpened: [...state.isOpened, ...state.total\n          .filter((card) => (card.id === action.id))\n          .map((card) => ({ id: card.id, name: card.name }))],\n        total: state.total.map((card) => ((card.id === action.id)\n          ? { ...card, isClosed: false } : card)),\n      };\n    case ActionTypes.CLOSE_CARD:\n      return {\n        ...state,\n        isOpened: [],\n        total: state.total.map((card) => ((!card.isClosed)\n          ? { ...card, isClosed: true } : card)),\n      };\n    case ActionTypes.HIDE_CARD:\n      return {\n        ...state,\n        isOpened: [],\n        visibleCounts: state.visibleCounts - COUNT_CARDS_IN_PAIR,\n        total: state.total.map((card) => ((!card.isHidden && !card.isClosed)\n          ? { ...card, isHidden: true } : card)),\n      };\n    case ActionTypes.RECEIVE_CARDS:\n      return {\n        ...state,\n        total: action.cards.map((card) => ({ ...card, isClosed: true, isHidden: false })),\n      };\n    default:\n      return state;\n  }\n};\n\nexport default cards;\n","import { combineReducers } from 'redux';\nimport timer from './timer';\nimport cards from './cards';\n\nexport default combineReducers({\n  timer,\n  cards,\n});\n","import { GameOptions } from '../constants';\n\nconst numbers = ['ace', 'king', 'queen', 'jack', 'ten', 'nine', 'eight', 'seven', 'six'];\nconst suits = ['heart', 'diamond', 'spades', 'club'];\n\nconst getPlayingCards = () => {\n  const cards = [];\n  suits.forEach((suit) => {\n    numbers.forEach((number) => cards.push({\n      imgSrc: `media/cards/${number}_${suit}.png`,\n      name: {\n        number,\n        suit,\n      },\n    }));\n    return cards;\n  });\n  return cards;\n};\n\nconst getShuffleCards = (cards) => cards.sort(() => Math.random() - 0.5);\n\nconst getNewCards = (cards) => {\n  const newCards = [];\n  while (newCards.length < GameOptions.countPair) {\n    const randomCard = cards[Math.floor(Math.random() * cards.length)];\n    if (!newCards.includes(randomCard)) newCards.push(randomCard);\n  }\n  return newCards;\n};\n\nconst getRandomCards = () => {\n  const cards = getPlayingCards();\n  if (cards.length < GameOptions.countPair) return [];\n  const newCards = getNewCards(cards);\n  const shuffledCards = getShuffleCards([...newCards, ...newCards]);\n  return shuffledCards.map((card, index) => ({ ...card, id: index }));\n};\n\nexport default getRandomCards;\n","import React from 'react';\n\nconst Header = () => (\n  <header>\n    <h1>Find a pair</h1>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport Game from './Game';\nimport combineReducers from '../reducers';\nimport { receiveCards } from '../actions';\nimport getRandomCards from '../data/playing-cards';\nimport Header from '../components/Header';\n\nconst store = createStore(combineReducers);\n\nconst cards = getRandomCards();\nstore.dispatch(receiveCards(cards));\n\nconst App = () => (\n  <main>\n    <Provider store={store}>\n      <Header />\n      <Game />\n    </Provider>\n  </main>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './containers/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}